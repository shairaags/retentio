#          Compound %in% input$multi_analytes,
#          !is.na(Date), !is.na(Area), Area > 0)
if (nrow(df) == 0) return(NULL)
df_log <- df %>%
mutate(logArea = log10(Area)) %>%
filter(!is.na(logArea)) %>%
arrange(Date)  # ‚Üê tri par date
p <- ggplot(df_log, aes(x = Date, y = logArea, color = Compound)) +
geom_line() + geom_point() +
theme_minimal() +
labs(title = "Cin√©tique des Aires (log10) des √©talons internes",
y = "log10(Area)", x = "Date") +
theme(legend.position = "bottom")
ggsave(file, plot = p, width = 10, height = 6, dpi = 300)
}
)
output$download_cv_plot2 <- downloadHandler(
filename = function() {
paste0("CV_plot_ret2_", Sys.Date(), ".png")
},
content = function(file) {
df <- data_reactive_2() %>%
filter(Compound %in% input$multi_analytes2,
!is.na(Date), !is.na(Area), Area > 0)
if (nrow(df) == 0) return(NULL)
cv_data <- df %>%
filter(!is.na(CV)) %>%
arrange(Date)
p <- ggplot(cv_data, aes(x = Date, y = CV)) +
geom_point(aes(color = CV > 30)) +
geom_line(aes(group = Compound), color = "black") +
scale_color_manual(values = c("FALSE" = "black", "TRUE" = "red")) +
geom_hline(yintercept = 30, linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Cin√©tique des CV (%) des √©talons internes",
y = "CV (%)", x = "Date") +
theme(legend.position = "none")
ggsave(file, plot = p, width = 10, height = 6, dpi = 300)
}
)
output$download_area_plot2 <- downloadHandler(
filename = function() {
paste0("Area_plot_ret2_", Sys.Date(), ".png")
},
content = function(file) {
df <- data_reactive_2() %>%
filter(Compound %in% input$multi_analytes2,
!is.na(Date), !is.na(Area), Area > 0)
if (nrow(df) == 0) return(NULL)
df_log <- df %>%
mutate(logArea = log10(Area)) %>%
filter(!is.na(logArea)) %>%
arrange(Date)
p <- ggplot(df_log, aes(x = Date, y = logArea, color = Compound)) +
geom_line() + geom_point() +
theme_minimal() +
labs(title = "Cin√©tique des Aires (log10) des √©talons internes",
y = "log10(Area)", x = "Date") +
theme(legend.position = "bottom")
ggsave(file, plot = p, width = 10, height = 6, dpi = 300)
}
)
#shinyDirChoose(input, "dir", roots = c(home = "~"), session = session)
volumes <- c(
"Home" = "C:/Users/Masspeclab",
"Bureau" = "C:/Users/Masspeclab/Desktop",
"Documents" = "C:/Users/Masspeclab/Documents"
)
shinyDirChoose(input, "dir", roots = volumes, session = session)
observeEvent(input$dir, {
dir_path <- parseDirPath(volumes, input$dir)
req(dir_path)
data_wide <- preprocess_folder_tenax(dir_path)  # üõ† utiliser le bon traitement global
if (nrow(data_wide) == 0) {
showModal(
modalDialog(
title = "Erreur de chargement",
div(style = "font-size:20px; color:red; text-align:center;",
"‚ùå Aucun fichier CSV exploitable trouv√©."),
easyClose = TRUE,
footer = modalButton("OK")
)
)
return(NULL)
}
output$download_formatted <- downloadHandler(
filename = function() paste0("tableau_formate_", Sys.Date(), ".csv"),
content = function(file) {
write_csv2(data_wide, file)
showNotification("‚úÖ Donn√©es format√©es pr√™tes au t√©l√©chargement.", type = "message")
}
)
})
# -- Choix dossier Tenax --
shinyDirChoose(input, "dir_tenax", roots = volumes, session = session)
observeEvent(input$dir_tenax, {
dir_path <- parseDirPath(volumes, input$dir_tenax)
req(dir_path)
files <- list.files(dir_path, pattern = "\\.csv$", full.names = TRUE)
if (length(files) == 0) {
showNotification("‚ùå Aucun fichier CSV trouv√©.", type = "error")
return()
}
withProgress(message = "‚è≥ Traitement des fichiers Tenax...", value = 0, {
total_steps <- length(files)
all_tables <- list()
for (i in seq_along(files)) {
filepath <- files[i]
df <- read_csv2(filepath, show_col_types = FALSE)
if ("Sample" %in% names(df) && "Area" %in% names(df)) {
best_hits <- df %>%
group_by(Sample, Compound) %>%
slice_max(order_by = Area, n = 1, with_ties = FALSE) %>%
ungroup()
date_extracted <- str_extract(basename(filepath), "\\d{8}")
date_formatted <- format(as.Date(date_extracted, "%d%m%Y"), "%Y-%m-%d")
summarised <- best_hits %>%
group_by(Compound) %>%
summarise(
!!paste0("Area_", date_formatted) := mean(Area, na.rm = TRUE),
!!paste0("CV_", date_formatted) := sd(Area, na.rm = TRUE) / mean(Area, na.rm = TRUE) * 100,
.groups = "drop"
)
all_tables[[i]] <- summarised
} else if (all(c("Compound", "Area", "CV") %in% names(df))) {
date_extracted <- str_extract(basename(filepath), "\\d{8}")
date_formatted <- format(as.Date(date_extracted, "%d%m%Y"), "%Y-%m-%d")
summarised <- df %>%
rename(
!!paste0("Area_", date_formatted) := Area,
!!paste0("CV_", date_formatted) := CV
)
all_tables[[i]] <- summarised
} else {
all_tables[[i]] <- tibble()
}
incProgress(1 / total_steps)
}
all_tables <- all_tables[map_lgl(all_tables, ~ nrow(.) > 0)]
if (length(all_tables) == 0) {
showNotification("‚ùå Aucun fichier exploitable Tenax.", type = "error")
return()
}
final_table <- reduce(all_tables, full_join, by = "Compound")
output$download_tenax <- downloadHandler(
filename = function() paste0("tenax_formate_", Sys.Date(), ".csv"),
content = function(file) {
write_csv2(final_table, file)
showNotification("‚úÖ Donn√©es Tenax pr√™tes au t√©l√©chargement.", type = "message")
}
)
})
})
# -- Choix dossier Plasma --
shinyDirChoose(input, "dir_plasma", roots = volumes, session = session)
observeEvent(input$dir_plasma, {
dir_path <- parseDirPath(volumes, input$dir_plasma)
req(dir_path)
if (!str_detect(tolower(basename(dir_path)), "plasma")) {
showModal(modalDialog(
title = "Erreur",
div(style = "font-size:18px; color:red; text-align:center;",
"‚ùå Ceci n'est pas un dossier Plasma."),
easyClose = TRUE,
footer = modalButton("OK")
))
return()
}
files <- list.files(dir_path, pattern = "\\.csv$", full.names = TRUE)
if (length(files) == 0) {
showModal(modalDialog(title = "Erreur", "Aucun fichier CSV trouv√©."))
return()
}
withProgress(message = "‚è≥ Traitement des fichiers Plasma...", value = 0, {
total_steps <- length(files)
all_tables <- list()
for (i in seq_along(files)) {
filepath <- files[i]
df <- preprocess_single_file(filepath)
if (nrow(df) == 0) next
best_hits <- df %>%
group_by(Sample, Compound) %>%
slice_max(order_by = Area, n = 1, with_ties = FALSE) %>%
ungroup()
date_extracted <- str_extract(basename(filepath), "\\d{8}")
date_formatted <- format(as.Date(date_extracted, "%d%m%Y"), "%Y-%m-%d")
summarised <- best_hits %>%
group_by(Compound) %>%
summarise(
!!paste0("Min_", date_formatted) := min(Area, na.rm = TRUE),
!!paste0("Max_", date_formatted) := max(Area, na.rm = TRUE),
!!paste0("Area_", date_formatted) := mean(Area, na.rm = TRUE),
!!paste0("CV_", date_formatted) := sd(Area, na.rm = TRUE) / mean(Area, na.rm = TRUE) * 100,
.groups = "drop"
)
# summarized <- best_hits %>%
#   group_by(Compound) %>%
#   summarise(
#     !!paste0("Area_", date_formatted) := mean(Area, na.rm = TRUE),
#     !!paste0("CV_", date_formatted) := sd(Area, na.rm = TRUE) / mean(Area, na.rm = TRUE) * 100,
#     .groups = "drop"
#   )
all_tables[[i]] <- summarised
incProgress(1 / total_steps)
}
all_tables <- all_tables[map_lgl(all_tables, ~ nrow(.) > 0)]
if (length(all_tables) == 0) {
showNotification("Aucune donn√©e Plasma exploitable.", type = "error")
return()
}
final_table <- reduce(all_tables, full_join, by = "Compound")
output$download_plasma <- downloadHandler(
filename = function() paste0("plasma_formate_", Sys.Date(), ".csv"),
content = function(file) {
write_csv2(final_table, file)
showNotification("‚úÖ Donn√©es Plasma pr√™tes au t√©l√©chargement.", type = "message")
}
)
})
})
observeEvent(input$tenax_dir, {
volumes <- c(Home = fs::path_home(), "R" = getwd())
shinyDirChoose(input, "tenax_dir", roots = volumes, session = session)
tenax_path <- parseDirPath(volumes, input$tenax_dir)
req(tenax_path)
if (!str_detect(tolower(basename(tenax_path)), "tenax")) {
showModal(modalDialog(
title = "Erreur",
div(style = "font-size:18px; color:red; text-align:center;",
"‚ùå Ceci n'est pas un dossier Tenax."),
easyClose = TRUE,
footer = modalButton("OK")
))
return()
}
tenax_final <- preprocess_folder_tenax(tenax_path)
if (nrow(tenax_final) == 0) {
showNotification("‚ùå Aucun fichier Tenax exploitable.", type = "error")
return()
}
output$tenax_export <- downloadHandler(
filename = function() {
paste0("tenax_formate_", Sys.Date(), ".csv")
},
content = function(file) {
write_csv2(tenax_final, file)
showNotification("‚úÖ Fichier Tenax format√© pr√™t !", type = "message")
}
)
})
observeEvent(input$tenax_summary_file, {
req(input$tenax_summary_file)
df <- read_csv2(input$tenax_summary_file$datapath)
df_long <- df %>%
pivot_longer(cols = starts_with("Area_"), names_to = "Measure", values_to = "Area") %>%
mutate(
DateRaw = str_remove(Measure, "Area_"),
DateLabel = factor(DateRaw, levels = unique(DateRaw)),  # ‚ûú garde l‚Äôordre d‚Äôapparition
Date = as.Date(str_extract(DateRaw, "\\d{4}-\\d{2}-\\d{2}")),  # ‚ûú utile pour d'autres usages
Compound = as.character(Compound)
)
output$tenax_summary_table <- renderDT({
req(data_reactive())
req(nrow(data_reactive()) > 0)
datatable(df, options = list(scrollX = TRUE, pageLength = 10))
})
output$tenax_summary_plot <- renderPlotly({
req(data_reactive())  # ‚úÖ ne fait rien si reset
req(nrow(data_reactive()) > 0)
df_long_sorted <- df_long %>%
arrange(Compound, Date)
p <- ggplot(df_long_sorted, aes(x = DateLabel, y = Area, group = Compound, color = Compound)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "√âvolution des aires moyennes (Tenax)",
x = "Date/nom du fichier", y = "Aire") +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust = 1, size = 8)  # ‚Üê rotation + lisibilit√©
)
ggplotly(p)
})
output$tenax_cv_plot <- renderPlotly({
req(data_reactive())
req(nrow(data_reactive()) > 0)
req(input$tenax_summary_file)
df <- read_csv2(input$tenax_summary_file$datapath, show_col_types = FALSE)
# ‚úÖ V√©rifie que CV_Global existe
if (!"CV_Global" %in% colnames(df)) {
return(plotly_empty(type = "scatter", mode = "markers") %>%
layout(title = "Aucune colonne 'CV_Global' trouv√©e"))
}
df <- df %>%
mutate(
is_extreme = Compound %in% c("Acetone", "Acetonitrile"),
CV_Global = as.numeric(str_replace(as.character(CV_Global), ",", "."))
)
df_normaux <- df %>% filter(!is_extreme)
df_extremes <- df %>% filter(is_extreme)
trace_normaux <- plot_ly(df_normaux, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV standards", marker = list(color = 'steelblue'),
yaxis = "y")
trace_extremes <- plot_ly(df_extremes, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV extr√™mes", marker = list(color = 'firebrick'),
yaxis = "y2")
subplot(trace_normaux, trace_extremes) %>%
layout(
title = "CV global (%) par compos√© (double axe Y)",
xaxis = list(title = "Compos√©s"),
yaxis = list(
title = "CV standards",
side = "left",
overlaying = NULL
),
yaxis2 = list(
title = "CV extr√™mes",
side = "right",
overlaying = "y",
showgrid = FALSE
),
shapes = list(
list(
type = "line",
x0 = -0.5,
x1 = nrow(df) - 0.5,  # ‚úÖ plus s√ªr que length(df$Compound)
y0 = 30,
y1 = 30,
yref = "y",
line = list(color = "red", dash = "dash")
)
),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
})
})
output$retentio2_ui <- renderUI({
tagList(
fluidRow(
valueBoxOutput("cvBox2"),
valueBoxOutput("meanBox2"),
conditionalPanel(condition = "output.showSequenceBox2", valueBoxOutput("nSeqBox2")),
conditionalPanel(condition = "output.showCVFAME2", valueBoxOutput("cvBoxFAME2")),
valueBoxOutput("cvBoxInterne2")
),
fluidRow(
box(title = "Fichiers charg√©s", width = 12,
verbatimTextOutput("loadedFiles2"),
verbatimTextOutput("data_summary2"))
),
fluidRow(
tabBox(title = "Visualisation", width = 12,
tabPanel("CV% par s√©quenceüìâ", plotlyOutput("CVPlot_time2")),
tabPanel("Aires par Dateüìâ", plotlyOutput("trendPlot2")),
#tabPanel("Aires par date d√©sordonn√©", plotlyOutput("areaPlot2")), ICI AIRE PAR DATE DESORDONNER
tabPanel("Cin√©tiques multi-compos√©süìä",
downloadButton("download_cv_plot2", "T√©l√©charger CV (%) PNG"),
downloadButton("download_area_plot2", "T√©l√©charger Aire (log10) PNG"),
plotlyOutput("multiCVPlot2"),
plotlyOutput("multiAreaPlot2"))
)
),
fluidRow(box(title = "Donn√©es filtr√©es", width = 12, DTOutput("dataTable2"))),
fluidRow(
downloadButton("downloadCSV2", "T√©l√©charger CSV nettoy√©"),
actionButton("zoom_issues2", "Zoom sur probl√®mes"),
actionButton("manual_correct2", "Corriger manuellement")
)
)
})
observeEvent(input$file_upload_combined, {
req(input$file_upload_combined)
files <- input$file_upload_combined$datapath
filenames <- input$file_upload_combined$name
full_data <- tibble()
withProgress(message = "‚è≥ Chargement des fichiers...", value = 0, {
total_steps <- length(files)
for (i in seq_along(files)) {
file_path <- files[i]
file_name <- filenames[i]
if (grepl("\\.csv$", file_name, ignore.case = TRUE)) {
df <- preprocess_smart(file_path, file_name)
} else if (grepl("\\.xlsx$", file_name, ignore.case = TRUE)) {
sheets <- excel_sheets(file_path)
for (sheet in sheets) {
df <- preprocess_smart(file_path, file_name, sheet)
full_data <- bind_rows(full_data, df)
}
}
full_data <- bind_rows(full_data, df)
incProgress(1 / total_steps)
}
})
if (nrow(full_data) == 0) {
showModal(
modalDialog(
title = "‚ùå Erreur",
"Aucun fichier exploitable trouv√©.",
easyClose = TRUE,
footer = modalButton("OK")
)
)
return()
}
# --- ‚¨áÔ∏è Si un seul fichier charg√© et contient Area_XXX : traiter comme fichier r√©sum√© Tenax
withProgress(message = "‚è≥ Chargement des fichiers...", value = 0, {
total_steps <- length(files)
for (i in seq_along(files)) {
file_path <- files[i]
file_name <- filenames[i]
# üëá‚ö†Ô∏è Cas sp√©cial fichier r√©sum√© Tenax d√©tect√© tout de suite
if (grepl("\\.csv$", file_name, ignore.case = TRUE)) {
df_test <- read_csv2(file_path, show_col_types = FALSE)
if (any(grepl("^Area_", names(df_test))) && "Compound" %in% names(df_test)) {
message("üìÑ Fichier r√©sum√© Tenax d√©tect√© !")
output$tenax_summary_table <- renderDT({
req(data_reactive())
req(nrow(data_reactive()) > 0)
datatable(df_test, options = list(scrollX = TRUE, pageLength = 10))
})
df_long <- df_test %>%
pivot_longer(cols = starts_with("Area_"), names_to = "Measure", values_to = "Area") %>%
mutate(
DateRaw = str_remove(Measure, "Area_"),
DateLabel = factor(DateRaw, levels = unique(DateRaw)),
Date = as.Date(str_extract(DateRaw, "\\d{4}-\\d{2}-\\d{2}")),
Compound = as.character(Compound)
) %>%
arrange(Compound, Date)
output$tenax_summary_plot <- renderPlotly({
req(data_reactive())
req(nrow(data_reactive()) > 0)
p <- ggplot(df_long, aes(x = DateLabel, y = Area, group = Compound, color = Compound)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "√âvolution des aires moyennes (Tenax)",
x = "Date/nom du fichier", y = "Aire") +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust = 1, size = 8)
)
ggplotly(p)
})
output$tenax_cv_plot <- renderPlotly({
req(data_reactive())
req(nrow(data_reactive()) > 0)
if (!"CV_Global" %in% colnames(df_test)) {
return(plotly_empty(type = "scatter", mode = "markers") %>%
layout(title = "Aucune colonne 'CV_Global' trouv√©e"))
}
df_test <- df_test %>%
mutate(
is_extreme = Compound %in% c("Acetone", "Acetonitrile"),
CV_Global = as.numeric(str_replace(as.character(CV_Global), ",", "."))
)
df_normaux <- df_test %>% filter(!is_extreme)
df_extremes <- df_test %>% filter(is_extreme)
trace_normaux <- plot_ly(df_normaux, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV standards", marker = list(color = 'steelblue'),
yaxis = "y")
trace_extremes <- plot_ly(df_extremes, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV extr√™mes", marker = list(color = 'firebrick'),
yaxis = "y2")
subplot(trace_normaux, trace_extremes) %>%
layout(
title = "CV global (%) par compos√© (double axe Y)",
xaxis = list(title = "Compos√©s"),
yaxis = list(title = "CV standards", side = "left"),
yaxis2 = list(title = "CV extr√™mes", side = "right", overlaying = "y", showgrid = FALSE),
shapes = list(
list(type = "line", x0 = -0.5, x1 = nrow(df_test) - 0.5, y0 = 30, y1 = 30, yref = "y",
line = list(color = "red", dash = "dash"))
),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
})
showNotification("üìà Fichier r√©sum√© Tenax d√©tect√© et graphiques affich√©s !", type = "message")
next  # ‚ö†Ô∏è on saute ce fichier r√©sum√© ‚Üí ne pas le traiter en plus
}
}
# üëá Traitement classique sinon
if (grepl("\\.csv$", file_name, ignore.case = TRUE)) {
df <- preprocess_smart(file_path, file_name)
} else if (grepl("\\.xlsx$", file_name, ignore.case = TRUE)) {
sheets <- excel_sheets(file_path)
for (sheet in sheets) {
df <- preprocess_smart(file_path, file_name, sheet)
full_data <- bind_rows(full_data, df)
}
}
full_data <- bind_rows(full_data, df)
incProgress(1 / total_steps)
}
})
# Si donn√©es valides ‚Üí on les stocke dans le reactive
df_flagged <- if ("RT" %in% names(full_data)) flag_anomalies(full_data) else full_data
data_reactive(df_flagged)
updatePickerInput(session, "sequence", choices = sort(unique(df_flagged$Sequence)))
updatePickerInput(session, "type", selected = "Tous")  # valeurs fixes d√©j√† dans choices
updatePickerInput(session, "analyte", choices = sort(unique(df_flagged$Compound)))
updatePickerInput(session, "multi_analytes", choices = unique(df_flagged$Compound))
showNotification("‚úÖ Fichiers Tenax charg√©s avec succ√®s !", type = "message")
})
}
# ---- APP ----
shinyApp(ui, server)
#10:30 -> 07/05/2025
#14:45 -> 12/05/2025
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
