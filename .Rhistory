date_formatted <- format(as.Date(date_extracted, "%d%m%Y"), "%Y-%m-%d")
df %>%
rename(
!!paste0("Area_", date_formatted) := Area,
!!paste0("CV_", date_formatted) := CV
)
} else {
# üõë Fichier non reconnu
return(tibble())
}
})
all_tables <- all_tables[map_lgl(all_tables, ~ nrow(.) > 0)]
if (length(all_tables) == 0) {
showNotification("‚ùå Aucun fichier exploitable Tenax.", type = "error")
return()
}
final_table <- reduce(all_tables, full_join, by = "Compound")
output$download_tenax <- downloadHandler(
filename = function() paste0("tenax_formate_", Sys.Date(), ".csv"),
content = function(file) {
write_csv2(final_table, file)
showNotification("‚úÖ Donn√©es Tenax pr√™tes au t√©l√©chargement.", type = "message")
}
)
})
# -- Choix dossier Plasma --
shinyDirChoose(input, "dir_plasma", roots = volumes, session = session)
observeEvent(input$dir_plasma, {
dir_path <- parseDirPath(volumes, input$dir_plasma)
req(dir_path)
files <- list.files(dir_path, pattern = "\\.csv$", full.names = TRUE)
if (length(files) == 0) {
showModal(modalDialog(title = "Erreur", "Aucun fichier CSV trouv√©."))
return()
}
all_tables <- map(files, function(filepath) {
df <- preprocess_single_file(filepath)
if (nrow(df) == 0) return(tibble())
best_hits <- df %>%
group_by(Sample, Compound) %>%
slice_max(order_by = Area, n = 1, with_ties = FALSE) %>%
ungroup()
date_extracted <- str_extract(basename(filepath), "\\d{8}")
date_formatted <- format(as.Date(date_extracted, "%d%m%Y"), "%Y-%m-%d")
best_hits %>%
group_by(Compound) %>%
summarise(
!!paste0("Area_", date_formatted) := mean(Area, na.rm = TRUE),
!!paste0("CV_", date_formatted) := sd(Area, na.rm = TRUE) / mean(Area, na.rm = TRUE) * 100,
.groups = "drop"
)
})
all_tables <- all_tables[map_lgl(all_tables, ~ nrow(.) > 0)]
if (length(all_tables) == 0) {
showNotification("Aucune donn√©e Plasma exploitable.", type = "error")
return()
}
final_table <- reduce(all_tables, full_join, by = "Compound")
output$download_plasma <- downloadHandler(
filename = function() paste0("plasma_formate_", Sys.Date(), ".csv"),
content = function(file) {
write_csv2(final_table, file)
showNotification("‚úÖ Donn√©es Plasma pr√™tes au t√©l√©chargement.", type = "message")
}
)
})
observeEvent(input$tenax_dir, {
volumes <- c(Home = fs::path_home(), "R" = getwd())
shinyDirChoose(input, "tenax_dir", roots = volumes, session = session)
tenax_path <- parseDirPath(volumes, input$tenax_dir)
req(tenax_path)
tenax_final <- preprocess_folder_tenax(tenax_path)
if (nrow(tenax_final) == 0) {
showNotification("‚ùå Aucun fichier Tenax exploitable.", type = "error")
return()
}
output$tenax_export <- downloadHandler(
filename = function() {
paste0("tenax_formate_", Sys.Date(), ".csv")
},
content = function(file) {
write_csv2(tenax_final, file)
showNotification("‚úÖ Fichier Tenax format√© pr√™t !", type = "message")
}
)
})
observeEvent(input$tenax_summary_file, {
req(input$tenax_summary_file)
df <- read_csv2(input$tenax_summary_file$datapath)
df_long <- df %>%
pivot_longer(cols = starts_with("Area_"), names_to = "Measure", values_to = "Area") %>%
mutate(
DateRaw = str_remove(Measure, "Area_"),
DateLabel = factor(DateRaw, levels = unique(DateRaw)),  # ‚ûú garde l‚Äôordre d‚Äôapparition
Date = as.Date(str_extract(DateRaw, "\\d{4}-\\d{2}-\\d{2}")),  # ‚ûú utile pour d'autres usages
Compound = as.character(Compound)
)
output$tenax_summary_table <- renderDT({
datatable(df, options = list(scrollX = TRUE, pageLength = 10))
})
output$tenax_summary_plot <- renderPlotly({
df_long_sorted <- df_long %>%
arrange(Compound, Date)
p <- ggplot(df_long_sorted, aes(x = DateLabel, y = Area, group = Compound, color = Compound)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "√âvolution des aires moyennes (Tenax)",
x = "Date/nom du fichier", y = "Aire") +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust = 1, size = 8)  # ‚Üê rotation + lisibilit√©
)
ggplotly(p)
})
output$tenax_cv_plot <- renderPlotly({
req(input$tenax_summary_file)
df <- read_csv2(input$tenax_summary_file$datapath, show_col_types = FALSE)
# ‚úÖ V√©rifie que CV_Global existe
if (!"CV_Global" %in% colnames(df)) {
return(plotly_empty(type = "scatter", mode = "markers") %>%
layout(title = "Aucune colonne 'CV_Global' trouv√©e"))
}
df <- df %>%
mutate(
is_extreme = Compound %in% c("Acetone", "Acetonitrile"),
CV_Global = as.numeric(str_replace(as.character(CV_Global), ",", "."))
)
df_normaux <- df %>% filter(!is_extreme)
df_extremes <- df %>% filter(is_extreme)
trace_normaux <- plot_ly(df_normaux, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV standards", marker = list(color = 'steelblue'),
yaxis = "y")
trace_extremes <- plot_ly(df_extremes, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV extr√™mes", marker = list(color = 'firebrick'),
yaxis = "y2")
subplot(trace_normaux, trace_extremes) %>%
layout(
title = "CV global (%) par compos√© (double axe Y)",
xaxis = list(title = "Compos√©s"),
yaxis = list(
title = "CV standards",
side = "left",
overlaying = NULL
),
yaxis2 = list(
title = "CV extr√™mes",
side = "right",
overlaying = "y",
showgrid = FALSE
),
shapes = list(
list(
type = "line",
x0 = -0.5,
x1 = nrow(df) - 0.5,  # ‚úÖ plus s√ªr que length(df$Compound)
y0 = 30,
y1 = 30,
yref = "y",
line = list(color = "red", dash = "dash")
)
),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
})
})
output$retentio2_ui <- renderUI({
tagList(
fluidRow(
valueBoxOutput("cvBox2"),
valueBoxOutput("meanBox2"),
conditionalPanel(condition = "output.showSequenceBox2", valueBoxOutput("nSeqBox2")),
conditionalPanel(condition = "output.showCVFAME2", valueBoxOutput("cvBoxFAME2")),
valueBoxOutput("cvBoxInterne2")
),
fluidRow(
box(title = "Fichiers charg√©s", width = 12,
verbatimTextOutput("loadedFiles2"),
verbatimTextOutput("data_summary2"))
),
fluidRow(
tabBox(title = "Visualisation", width = 12,
tabPanel("CV% par s√©quence", plotlyOutput("CVPlot_time2")),
tabPanel("Aires par Date", plotlyOutput("trendPlot2")),
tabPanel("Aires par date d√©sordonn√©", plotlyOutput("areaPlot2")),
tabPanel("Cin√©tiques multi-compos√©s",
downloadButton("download_cv_plot2", "T√©l√©charger CV (%) PNG"),
downloadButton("download_area_plot2", "T√©l√©charger Aire (log10) PNG"),
plotlyOutput("multiCVPlot2"),
plotlyOutput("multiAreaPlot2"))
)
),
fluidRow(box(title = "Donn√©es filtr√©es", width = 12, DTOutput("dataTable2"))),
fluidRow(
downloadButton("downloadCSV2", "T√©l√©charger CSV nettoy√©"),
actionButton("zoom_issues2", "Zoom sur probl√®mes"),
actionButton("manual_correct2", "Corriger manuellement")
)
)
})
}
# ---- APP ----
shinyApp(ui, server)
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
output$trendPlot2 <- renderPlotly({
df <- filtered_data_2()
# üîç Nettoyage robustes des valeurs d√©cimales
df$Area <- as.numeric(gsub(",", ".", as.character(df$Area)))
# üìä Calcul Min / Max / Moyenne
summary <- df %>%
group_by(Date) %>%
summarise(
Min = min(Area, na.rm = TRUE),
Max = max(Area, na.rm = TRUE),
Mean = mean(Area, na.rm = TRUE),
.groups = "drop"
)
print(summary)  # ‚ö†Ô∏è √Ä v√©rifier dans la console RStudio
# üìà Affichage forc√© avec couleurs + styles distincts
plot_ly(summary, x = ~Date) %>%
add_lines(y = ~Min, name = "Min", line = list(color = "blue", width = 2)) %>%
add_markers(y = ~Min, marker = list(color = "blue", size = 5)) %>%
add_lines(y = ~Mean, name = "Moyenne", line = list(color = "orange", width = 2, dash = "dash")) %>%
add_markers(y = ~Mean, marker = list(color = "orange", size = 5)) %>%
add_lines(y = ~Max, name = "Max", line = list(color = "green", width = 2)) %>%
add_markers(y = ~Max, marker = list(color = "green", size = 5)) %>%
layout(
yaxis = list(title = "Tendance des Aires", type = "log"),  # ‚ûï optionnel : log pour mieux voir les diff√©rences
legend = list(x = 0.05, y = 0.95)
)
})
print(summary)
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
le filtrage est parfait dans longlet plasma nickel, mais mtn je le veux aussi dans longlet tenax parfaitement sans rien alterer dautre
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
print(names(df))  # Affiche toutes les colonnes dans la console R
runApp('Retentio.R')
runApp('Retentio.R')
?ymd
runApp('Retentio.R')
df<- read.csv2("C:/Users/Masspeclab/Downloads/plasma_formate_2025-05-12.csvooooooooooooooooooooooo.csv")
df
min_cols <- grep("Min", colnames(df), ignore.case = TRUE, value = TRUE,fixed=TRUE)
min_cols
min_cols <- grep("Min", colnames(df),fixed=TRUE)
min_cols
df_min <- df %>%
select(Compound, all_of(min_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Min_"), Stat = "Min")
df_min
ymd(df_min$Date
)
df_min <- df %>%
select(Compound, all_of(min_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Min_"), Stat = "Min")
df_mean <- df %>%
select(Compound, all_of(mean_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Mean_"), Stat = "Mean")
df_max <- df %>%
select(Compound, all_of(max_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Area_"), Stat = "Max")
min_cols <- grep("Min", colnames(df),value = TRUE,fixed=TRUE)
mean_cols <- grep("Mean", colnames(df),value = TRUE,fixed=TRUE)
max_cols <- grep("Area", colnames(df),  value = TRUE,fixed=TRUE)
df_min <- df %>%
select(Compound, all_of(min_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Min_"), Stat = "Min")
df_mean <- df %>%
select(Compound, all_of(mean_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Mean_"), Stat = "Mean")
df_max <- df %>%
select(Compound, all_of(max_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Area_"), Stat = "Max")
# Regroupement pour courbes ind√©pendantes
df_all <- bind_rows(df_min, df_mean, df_max) %>%
mutate(
Date = ymd(Date),
Value = as.numeric(str_replace(as.character(Value), ",", "."))
)
df_all
plot_ly(df_all, x = ~Date, y = ~Value, color = ~Stat, type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Tendances Min / Moyenne / Max (Aires)",
yaxis = list(title = "Aire moyenne"),
xaxis = list(title = "Date"),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
df<- read.csv2("C:/Users/Masspeclab/Downloads/plasma_formate_2025-05-12.csvooooooooooooooooooooooo.csv")
min_cols <- grep("Min", colnames(df),value = TRUE,fixed=TRUE)
mean_cols <- grep("Mean", colnames(df),value = TRUE,fixed=TRUE)
max_cols <- grep("Area", colnames(df),  value = TRUE,fixed=TRUE)
df_min <- df %>%
select(Compound, all_of(min_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Min_"), Stat = "Min")
df_min
min_cols
ymd(df_min$Date)
order(df_all$Date)
df_all<-df_all[order(df_all$Date),]
plot_ly(df_all, x = ~Date, y = ~Value, color = ~Stat, type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Tendances Min / Moyenne / Max (Aires)",
yaxis = list(title = "Aire moyenne"),
xaxis = list(title = "Date"),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
runApp('Retentio.R')
df<- read.csv2("C:/Users/Masspeclab/Downloads/plasma_formate_2025-05-12.csvooooooooooooooooooooooo.csv")
dim(df)
df_all
plot_ly(df_all, x = ~Date, y = ~Value, color = ~Stat, group=~Compound,type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Tendances Min / Moyenne / Max (Aires)",
yaxis = list(title = "Aire moyenne"),
xaxis = list(title = "Date"),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
runApp('Retentio.R')
plot_ly(df_all, x = ~Date, y = ~Value, color = ~Stat, group_by=~Compound,type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Tendances Min / Moyenne / Max (Aires)",
yaxis = list(title = "Aire moyenne"),
xaxis = list(title = "Date"),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
df_all_c<-df_all[df$Compound==df$Compound[1],]
df_all
df_all_c<-df_all[df_all$Compound==df_all$Compound[1],]
plot_ly(df_all, x = ~Date, y = ~Value, color = ~Stat, group_by=~Compound, type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Tendances Min / Moyenne / Max (Aires)",
yaxis = list(title = "Aire moyenne"),
xaxis = list(title = "Date"),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
plot_ly(df_all_c, x = ~Date, y = ~Value, color = ~Stat, type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Tendances Min / Moyenne / Max (Aires)",
yaxis = list(title = "Aire moyenne"),
xaxis = list(title = "Date"),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
runApp('Retentio.R')
df<- read.csv2("C:/Users/Masspeclab/Downloads/plasma_formate_2025-05-12.csvooooooooooooooooooooooo.csv")
min_cols <- grep("Min", colnames(df), value = TRUE,fixed=TRUE)
mean_cols <- grep("Mean", colnames(df),  value = TRUE,fixed=TRUE)
max_cols <- grep("Area", colnames(df),  value = TRUE,fixed=TRUE)
# min_cols <- grep("^Min_", names(df), value = TRUE)
# mean_cols <- grep("^Mean_", names(df), value = TRUE)
# max_cols <- grep("^Area_", names(df), value = TRUE)
validate(need(length(c(min_cols, mean_cols, max_cols)) > 0, "‚ùå Aucune colonne Min_, Mean_ ou Area_ d√©tect√©e."))
# Mise au format long
df_min <- df %>%
select(Compound, all_of(min_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Min_"), Stat = "Min")
df_mean <- df %>%
select(Compound, all_of(mean_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Mean_"), Stat = "Mean")
df_max <- df %>%
select(Compound, all_of(max_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Area_"), Stat = "Max")
# Regroupement pour courbes ind√©pendantes
df_all <- bind_rows(df_min, df_mean, df_max) %>%
mutate(
Date = ymd(Date),
Value = as.numeric(str_replace(as.character(Value), ",", "."))
)
# %>%
#   group_by(Date, Stat) %>%
#   summarise(Value = mean(Value, na.rm = TRUE), .groups = "drop")
# Affichage
plot_ly(df_all, x = ~Date, y = ~Value, color = ~Stat, type = 'scatter', mode = 'lines+markers') %>%
layout(
title = "Tendances Min / Moyenne / Max (Aires)",
yaxis = list(title = "Aire moyenne"),
xaxis = list(title = "Date"),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
df<- read.csv2("C:/Users/Masspeclab/Downloads/plasma_formate_2025-05-12.csvooooooooooooooooooooooo.csv")
min_cols <- grep("Min", colnames(df),value = TRUE,fixed=TRUE)
mean_cols <- grep("Mean", colnames(df),value = TRUE,fixed=TRUE)
max_cols <- grep("Area", colnames(df),  value = TRUE,fixed=TRUE)
df_min <- df %>%
select(Compound, all_of(min_cols)) %>%
pivot_longer(-Compound, names_to = "Measure", values_to = "Value") %>%
mutate(Date = str_remove(Measure, "Min_"), Stat = "Min")
df_min
df
runApp('Retentio.R')
df<- read.csv2("C:/Users/Masspeclab/Downloads/plasma_formate_2025-05-12.csvooooooooooooooooooooooo.csv")
df
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
library(shiny); runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
