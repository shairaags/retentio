mutate(
is_extreme = Compound %in% c("Acetone", "Acetonitrile"),
CV_Global = as.numeric(str_replace(as.character(CV_Global), ",", "."))
)
df_normaux <- df %>% filter(!is_extreme)
df_extremes <- df %>% filter(is_extreme)
trace_normaux <- plot_ly(df_normaux, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV standards", marker = list(color = 'steelblue'),
yaxis = "y")
trace_extremes <- plot_ly(df_extremes, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV extr√™mes", marker = list(color = 'firebrick'),
yaxis = "y2")
subplot(trace_normaux, trace_extremes) %>%
layout(
title = "CV global (%) par compos√© (double axe Y)",
xaxis = list(title = "Compos√©s"),
yaxis = list(
title = "CV standards",
side = "left",
overlaying = NULL
),
yaxis2 = list(
title = "CV extr√™mes",
side = "right",
overlaying = "y",
showgrid = FALSE
),
shapes = list(
list(
type = "line",
x0 = -0.5,
x1 = nrow(df) - 0.5,  # ‚úÖ plus s√ªr que length(df$Compound)
y0 = 30,
y1 = 30,
yref = "y",
line = list(color = "red", dash = "dash")
)
),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
})
})
output$retentio2_ui <- renderUI({
tagList(
fluidRow(
valueBoxOutput("cvBox2"),
valueBoxOutput("meanBox2"),
conditionalPanel(condition = "output.showSequenceBox2", valueBoxOutput("nSeqBox2")),
conditionalPanel(condition = "output.showCVFAME2", valueBoxOutput("cvBoxFAME2")),
valueBoxOutput("cvBoxInterne2")
),
fluidRow(
box(title = "Fichiers charg√©s", width = 12,
verbatimTextOutput("loadedFiles2"),
verbatimTextOutput("data_summary2"))
),
fluidRow(
tabBox(title = "Visualisation", width = 12,
tabPanel("CV% par s√©quenceüìâ", plotlyOutput("CVPlot_time2")),
tabPanel("Aires par Dateüìâ", plotlyOutput("trendPlot2")),
#tabPanel("Aires par date d√©sordonn√©", plotlyOutput("areaPlot2")), ICI AIRE PAR DATE DESORDONNER
tabPanel("Cin√©tiques multi-compos√©süìä",
downloadButton("download_cv_plot2", "T√©l√©charger CV (%) PNG"),
downloadButton("download_area_plot2", "T√©l√©charger Aire (log10) PNG"),
plotlyOutput("multiCVPlot2"),
plotlyOutput("multiAreaPlot2"))
)
),
fluidRow(box(title = "Donn√©es filtr√©es", width = 12, DTOutput("dataTable2"))),
fluidRow(
downloadButton("downloadCSV2", "T√©l√©charger CSV nettoy√©"),
actionButton("zoom_issues2", "Zoom sur probl√®mes"),
actionButton("manual_correct2", "Corriger manuellement")
)
)
})
observeEvent(input$file_upload_combined, {
req(input$file_upload_combined)
files <- input$file_upload_combined$datapath
filenames <- input$file_upload_combined$name
full_data <- tibble()
withProgress(message = "‚è≥ Chargement des fichiers...", value = 0, {
total_steps <- length(files)
for (i in seq_along(files)) {
file_path <- files[i]
file_name <- filenames[i]
if (grepl("\\.csv$", file_name, ignore.case = TRUE)) {
df <- preprocess_smart(file_path, file_name)
} else if (grepl("\\.xlsx$", file_name, ignore.case = TRUE)) {
sheets <- excel_sheets(file_path)
for (sheet in sheets) {
df <- preprocess_smart(file_path, file_name, sheet)
full_data <- bind_rows(full_data, df)
}
}
full_data <- bind_rows(full_data, df)
incProgress(1 / total_steps)
}
})
if (nrow(full_data) == 0) {
showModal(
modalDialog(
title = "‚ùå Erreur",
"Aucun fichier exploitable trouv√©.",
easyClose = TRUE,
footer = modalButton("OK")
)
)
return()
}
# --- ‚¨áÔ∏è Si un seul fichier charg√© et contient Area_XXX : traiter comme fichier r√©sum√© Tenax
withProgress(message = "‚è≥ Chargement des fichiers...", value = 0, {
total_steps <- length(files)
for (i in seq_along(files)) {
file_path <- files[i]
file_name <- filenames[i]
# üëá‚ö†Ô∏è Cas sp√©cial fichier r√©sum√© Tenax d√©tect√© tout de suite
if (grepl("\\.csv$", file_name, ignore.case = TRUE)) {
df_test <- read_csv2(file_path, show_col_types = FALSE)
if (any(grepl("^Area_", names(df_test))) && "Compound" %in% names(df_test)) {
message("üìÑ Fichier r√©sum√© Tenax d√©tect√© !")
output$tenax_summary_table <- renderDT({
req(data_reactive())
req(nrow(data_reactive()) > 0)
datatable(df_test, options = list(scrollX = TRUE, pageLength = 10))
})
df_long <- df_test %>%
pivot_longer(cols = starts_with("Area_"), names_to = "Measure", values_to = "Area") %>%
mutate(
DateRaw = str_remove(Measure, "Area_"),
DateLabel = factor(DateRaw, levels = unique(DateRaw)),
Date = as.Date(str_extract(DateRaw, "\\d{4}-\\d{2}-\\d{2}")),
Compound = as.character(Compound)
) %>%
arrange(Compound, Date)
output$tenax_summary_plot <- renderPlotly({
req(data_reactive())
req(nrow(data_reactive()) > 0)
p <- ggplot(df_long, aes(x = DateLabel, y = Area, group = Compound, color = Compound)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "√âvolution des aires moyennes (Tenax)",
x = "Date/nom du fichier", y = "Aire") +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust = 1, size = 8)
)
ggplotly(p)
})
output$tenax_cv_plot <- renderPlotly({
req(data_reactive())
req(nrow(data_reactive()) > 0)
if (!"CV_Global" %in% colnames(df_test)) {
return(plotly_empty(type = "scatter", mode = "markers") %>%
layout(title = "Aucune colonne 'CV_Global' trouv√©e"))
}
df_test <- df_test %>%
mutate(
is_extreme = Compound %in% c("Acetone", "Acetonitrile"),
CV_Global = as.numeric(str_replace(as.character(CV_Global), ",", "."))
)
df_normaux <- df_test %>% filter(!is_extreme)
df_extremes <- df_test %>% filter(is_extreme)
trace_normaux <- plot_ly(df_normaux, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV standards", marker = list(color = 'steelblue'),
yaxis = "y")
trace_extremes <- plot_ly(df_extremes, x = ~Compound, y = ~CV_Global, type = "bar",
name = "CV extr√™mes", marker = list(color = 'firebrick'),
yaxis = "y2")
subplot(trace_normaux, trace_extremes) %>%
layout(
title = "CV global (%) par compos√© (double axe Y)",
xaxis = list(title = "Compos√©s"),
yaxis = list(title = "CV standards", side = "left"),
yaxis2 = list(title = "CV extr√™mes", side = "right", overlaying = "y", showgrid = FALSE),
shapes = list(
list(type = "line", x0 = -0.5, x1 = nrow(df_test) - 0.5, y0 = 30, y1 = 30, yref = "y",
line = list(color = "red", dash = "dash"))
),
legend = list(orientation = "h", x = 0.1, y = 1.1)
)
})
showNotification("üìà Fichier r√©sum√© Tenax d√©tect√© et graphiques affich√©s !", type = "message")
next  # ‚ö†Ô∏è on saute ce fichier r√©sum√© ‚Üí ne pas le traiter en plus
}
}
# üëá Traitement classique sinon
if (grepl("\\.csv$", file_name, ignore.case = TRUE)) {
df <- preprocess_smart(file_path, file_name)
} else if (grepl("\\.xlsx$", file_name, ignore.case = TRUE)) {
sheets <- excel_sheets(file_path)
for (sheet in sheets) {
df <- preprocess_smart(file_path, file_name, sheet)
full_data <- bind_rows(full_data, df)
}
}
full_data <- bind_rows(full_data, df)
incProgress(1 / total_steps)
}
})
# Si donn√©es valides ‚Üí on les stocke dans le reactive
df_flagged <- if ("RT" %in% names(full_data)) flag_anomalies(full_data) else full_data
data_reactive(df_flagged)
updatePickerInput(session, "sequence", choices = sort(unique(df_flagged$Sequence)))
updatePickerInput(session, "type", selected = "Tous")  # valeurs fixes d√©j√† dans choices
updatePickerInput(session, "analyte", choices = sort(unique(df_flagged$Compound)))
updatePickerInput(session, "multi_analytes", choices = unique(df_flagged$Compound))
showNotification("‚úÖ Fichiers Tenax charg√©s avec succ√®s !", type = "message")
})
}
# ---- APP ----
shinyApp(ui, server)
#10:30 -> 07/05/2025
#14:45 -> 12/05/2025
runApp('Retentio.R')
runApp('Retentio.R')
runApp('Retentio.R')
# üìÅ Dossier contenant les fichiers bruts coll√©s
input_dir <- "C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC"
# üìÅ Dossier de sortie (sera cr√©√© automatiquement)
output_dir <- file.path(input_dir, "csv_export")
dir.create(output_dir, showWarnings = FALSE)
# üìú Lister tous les fichiers CSV du dossier
files <- list.files(input_dir, pattern = "\\.csv$", full.names = TRUE)
# üì¶ Boucle sur chaque fichier CSV brut
for (file in files) {
message("üìÑ Traitement de : ", basename(file))
data <- read.csv2(file, stringsAsFactors = FALSE)
index <- grep("Mol|Name", colnames(data))
if (length(index) == 0) next  # Ignorer les fichiers sans tableau d√©tectable
data_list <- list()
for (j in seq_along(index)) {
end_col <- if (j < length(index)) index[j + 1] - 1 else ncol(data)
data_list[[j]] <- data[, index[j]:end_col]
}
for (k in seq_along(data_list)) {
data_sub <- data_list[[k]]
data_sub <- data_sub[data_sub[, 1] != "", ]
if (nrow(data_sub) == 0) next
# ‚ö†Ô∏è Certaines tables n'ont pas assez de colonnes
if (ncol(data_sub) < 4) next
d <- data.frame(
Sample = data_sub[, 2],
Name = data_sub[, 1],
Area = data_sub[, 4],
stringsAsFactors = FALSE
)
nist_row <- unique(d$Sample[grepl("NIST", d$Sample)])
if (length(nist_row) == 0) next
date_raw <- strsplit(nist_row[1], "_", fixed = TRUE)[[1]][2]
output_file <- file.path(output_dir, paste0("clean_", date_raw, ".csv"))
write.csv2(d, file = output_file, row.names = FALSE)
}
}
message("‚úÖ Tous les fichiers ont √©t√© export√©s dans : ", output_dir)
# üìÅ Dossier contenant les fichiers bruts √† traiter
dir_path <- "C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC"
# üìÇ Cr√©er le sous-dossier de sortie
export_dir <- file.path(dir_path, "csv_export")
dir.create(export_dir, showWarnings = FALSE)
# üìÑ Liste tous les fichiers CSV du dossier
files <- list.files(dir_path, pattern = "\\.csv$", full.names = TRUE)
# üîÅ Boucle sur les fichiers
for (file in files) {
data <- read.csv2(file, stringsAsFactors = FALSE)
index <- grep("Mol|Name", colnames(data))
data_list <- list()
for (j in seq_along(index)) {
end_col <- if (j < length(index)) index[j + 1] - 1 else ncol(data)
data_list[[j]] <- data[, index[j]:end_col]
}
for (k in seq_along(data_list)) {
data_sub <- data_list[[k]]
if (ncol(data_sub) < 4) next
data_sub <- data_sub[data_sub[, 1] != "", ]
if (nrow(data_sub) == 0) next
d <- data.frame(Sample = data_sub[, 2], Name = data_sub[, 1], Area = data_sub[, 4])
nist_row <- unique(d$Sample[grepl("NIST", d$Sample)])
if (length(nist_row) == 0) next
date_raw <- strsplit(nist_row[1], "_", fixed = TRUE)[[1]][2]
out_file <- file.path(export_dir, paste0("clean_", date_raw, ".csv"))
write.csv2(d, file = out_file, row.names = FALSE)
}
}
print(nist_row)
print(nist_row)
input_dir <- "C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC"
output_dir <- file.path(input_dir, "csv_export")
dir.create(output_dir, showWarnings = FALSE)
files <- list.files(input_dir, pattern = "\\.csv$", full.names = TRUE)
for (file in files) {
message("üìÑ Traitement de : ", basename(file))
data <- read.csv2(file, stringsAsFactors = FALSE)
index <- grep("Mol|Name", colnames(data))
if (length(index) == 0) next
data_list <- list()
for (j in seq_along(index)) {
end_col <- if (j < length(index)) index[j + 1] - 1 else ncol(data)
data_list[[j]] <- data[, index[j]:end_col]
}
for (k in seq_along(data_list)) {
data_sub <- data_list[[k]]
if (ncol(data_sub) < 4) next
data_sub <- data_sub[data_sub[, 1] != "", ]
if (nrow(data_sub) == 0) next
d <- data.frame(Sample = data_sub[, 2], Name = data_sub[, 1], Area = data_sub[, 4])
nist_row <- unique(d$Sample[grepl("NIST", d$Sample)])
if (length(nist_row) == 0) next
date_raw <- strsplit(nist_row[1], "_", fixed = TRUE)[[1]][2]
output_file <- file.path(output_dir, paste0("clean_", date_raw, ".csv"))
write.csv2(d, file = output_file, row.names = FALSE)
}
}
message("‚úÖ Export termin√©. V√©rifie le dossier : ", output_dir)
input_dir <- "C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC"
output_dir <- file.path(input_dir, "csv_export")
dir.create(output_dir, showWarnings = FALSE)
files <- list.files(input_dir, pattern = "\\.csv$", full.names = TRUE)
for (file in files) {
message("üìÑ Traitement de : ", basename(file))
data <- read.csv2(file, stringsAsFactors = FALSE)
index <- grep("Mol|Name", colnames(data))
if (length(index) == 0) next
data_list <- list()
for (j in seq_along(index)) {
end_col <- if (j < length(index)) index[j + 1] - 1 else ncol(data)
data_list[[j]] <- data[, index[j]:end_col]
}
for (k in seq_along(data_list)) {
data_sub <- data_list[[k]]
if (ncol(data_sub) < 4) next
data_sub <- data_sub[data_sub[, 1] != "", ]
if (nrow(data_sub) == 0) next
d <- data.frame(Sample = data_sub[, 2], Name = data_sub[, 1], Area = data_sub[, 4])
# üëâ Nouveau : on extrait la date depuis le NOM DU FICHIER
file_basename <- basename(file)
date_raw <- str_extract(file_basename, "\\d{8}")  # ex: 25042025
if (is.na(date_raw)) next  # s√©curit√©
output_file <- file.path(output_dir, paste0("clean_", date_raw, ".csv"))
write.csv2(d, file = output_file, row.names = FALSE)
}
}
message("‚úÖ Termin√© ! R√©sultats dans : ", output_dir)
# üëÄ Ouvre un aper√ßu des fichiers g√©n√©r√©s
exported_files <- list.files(output_dir, full.names = TRUE)
first_file <- exported_files[1]
if (!is.na(first_file)) {
df_preview <- read.csv2(first_file)
View(df_preview)
}
explorer(output_dir)
explorer(output_dir)
system2("explorer", output_dir)
system2("explorer", output_dir)
length(files)
# üìÅ Dossier d‚Äôentr√©e
input_dir <- "C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC"
# üìÅ Dossier de sortie (sera cr√©√© si besoin)
output_dir <- file.path(input_dir, "csv_export")
dir.create(output_dir, showWarnings = FALSE)
# üìÑ Lister tous les fichiers CSV (insensible √† la casse)
files <- list.files(input_dir, pattern = "\\.csv$", full.names = TRUE, ignore.case = TRUE)
# üîÅ Traitement de chaque fichier
for (file in files) {
message("üìÑ Traitement de : ", basename(file))
data <- read.csv2(file, stringsAsFactors = FALSE)
# üîç Identifier les d√©buts de tableaux coll√©s
index <- grep("Mol|Name", colnames(data))
if (length(index) == 0) next  # aucun tableau d√©tect√©
data_list <- list()
for (j in seq_along(index)) {
end_col <- if (j < length(index)) index[j + 1] - 1 else ncol(data)
data_list[[j]] <- data[, index[j]:end_col]
}
for (k in seq_along(data_list)) {
data_sub <- data_list[[k]]
data_sub <- data_sub[data_sub[, 1] != "", ]
if (ncol(data_sub) < 4 || nrow(data_sub) == 0) next
d <- data.frame(
Sample = data_sub[, 2],
Name   = data_sub[, 1],
Area   = data_sub[, 4],
stringsAsFactors = FALSE
)
# üìÜ Extraire date du NOM DU FICHIER
file_basename <- basename(file)
date_raw <- stringr::str_extract(file_basename, "\\d{8}")  # format 25042025
if (is.na(date_raw)) next
output_file <- file.path(output_dir, paste0("clean_", date_raw, ".csv"))
write.csv2(d, file = output_file, row.names = FALSE)
}
}
message("‚úÖ Termin√© ! V√©rifie les fichiers dans : ", output_dir)
files <- list.files("C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC",
pattern = "\\.csv$", full.names = TRUE, ignore.case = TRUE)
file.info(files)
# üì¶ Charge les packages n√©cessaires
library(readxl)
library(writexl)
# üìÅ Dossier contenant tes faux CSV
input_dir <- "C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC"
# üìÇ Dossier de sortie
output_dir <- file.path(input_dir, "csv_export_excel_fixes")
dir.create(output_dir, showWarnings = FALSE)
# üîç Liste tous les fichiers avec extension .csv, .xls, .xlsx
files <- list.files(input_dir, pattern = "\\.(csv|xlsx|xls)$", full.names = TRUE, ignore.case = TRUE)
# üîÅ Conversion de chaque fichier
for (file in files) {
message("üìÑ Traitement de : ", basename(file))
# Essaye Excel en priorit√© (au cas o√π fichier Excel renomm√©)
success <- FALSE
try({
sheets <- excel_sheets(file)
df <- read_excel(file, sheet = sheets[1])
success <- TRUE
}, silent = TRUE)
# Si Excel √©choue, tente CSV standard
if (!success) {
try({
df <- read.csv2(file, stringsAsFactors = FALSE)
success <- TRUE
}, silent = TRUE)
}
# Si toujours pas lisible, on skippe
if (!success) {
message("‚ùå √âchec de lecture : ", basename(file))
next
}
# Sauvegarde propre en CSV
output_file <- file.path(output_dir, paste0(tools::file_path_sans_ext(basename(file)), "_clean.csv"))
write.csv2(df, file = output_file, row.names = FALSE)
message("‚úÖ Export√© vers : ", output_file)
}
message("üéâ Tous les fichiers valides ont √©t√© convertis dans : ", output_dir)
# üìÅ Dossier d‚Äôentr√©e
input_dir <- "C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC"
# üìÅ Dossier de sortie (sera cr√©√© si besoin)
output_dir <- file.path(input_dir, "csv_export")
dir.create(output_dir, showWarnings = FALSE)
# üìÑ Lister tous les fichiers CSV (insensible √† la casse)
files <- list.files(input_dir, pattern = "\\.csv$", full.names = TRUE, ignore.case = TRUE)
# üîÅ Traitement de chaque fichier
for (file in files) {
message("üìÑ Traitement de : ", basename(file))
data <- read.csv2(file, stringsAsFactors = FALSE)
# üîç Identifier les d√©buts de tableaux coll√©s
index <- grep("Mol|Name", colnames(data))
if (length(index) == 0) next  # aucun tableau d√©tect√©
data_list <- list()
for (j in seq_along(index)) {
end_col <- if (j < length(index)) index[j + 1] - 1 else ncol(data)
data_list[[j]] <- data[, index[j]:end_col]
}
for (k in seq_along(data_list)) {
data_sub <- data_list[[k]]
data_sub <- data_sub[data_sub[, 1] != "", ]
if (ncol(data_sub) < 4 || nrow(data_sub) == 0) next
d <- data.frame(
Sample = data_sub[, 2],
Name   = data_sub[, 1],
Area   = data_sub[, 4],
stringsAsFactors = FALSE
)
# üìÜ Extraire date du NOM DU FICHIER
file_basename <- basename(file)
date_raw <- stringr::str_extract(file_basename, "\\d{8}")  # format 25042025
if (is.na(date_raw)) next
output_file <- file.path(output_dir, paste0("clean_", date_raw, ".csv"))
write.csv2(d, file = output_file, row.names = FALSE)
}
}
message("‚úÖ Termin√© ! V√©rifie les fichiers dans : ", output_dir)
YOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
# üìÅ Dossier contenant les fichiers Excel convertis
input_dir <- "C:/Users/Masspeclab/Desktop/15052025 10h46/Suivi_Els_Tenax_GCxGC/csv_export_excel_fixes"
# üìÇ Dossier de sortie final
output_dir <- file.path(input_dir, "csv_export")
dir.create(output_dir, showWarnings = FALSE)
# üìÑ Liste tous les fichiers CSV
files <- list.files(input_dir, pattern = "\\.csv$", full.names = TRUE, ignore.case = TRUE)
# üîÅ Boucle sur chaque fichier
for (file in files) {
message("üìÑ Traitement de : ", basename(file))
data <- read.csv2(file, stringsAsFactors = FALSE)
index <- grep("Mol|Name", colnames(data))
if (length(index) == 0) next  # aucun tableau d√©tect√©
data_list <- list()
for (j in seq_along(index)) {
end_col <- if (j < length(index)) index[j + 1] - 1 else ncol(data)
data_list[[j]] <- data[, index[j]:end_col]
}
for (k in seq_along(data_list)) {
data_sub <- data_list[[k]]
data_sub <- data_sub[data_sub[, 1] != "", ]
if (ncol(data_sub) < 4 || nrow(data_sub) == 0) next
d <- data.frame(
Sample = data_sub[, 2],
Name   = data_sub[, 1],
Area   = data_sub[, 4],
stringsAsFactors = FALSE
)
# üìÜ Extraire la date du nom du fichier
file_basename <- basename(file)
date_raw <- stringr::str_extract(file_basename, "\\d{8}")  # format 25042025
if (is.na(date_raw)) next
output_file <- file.path(output_dir, paste0("clean_", date_raw, ".csv"))
write.csv2(d, file = output_file, row.names = FALSE)
message("‚úÖ Export√© : ", output_file)
}
}
message("üéâ Tous les fichiers ont √©t√© export√©s dans : ", output_dir)
